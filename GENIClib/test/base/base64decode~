(define-fun B ((h (BitVec 8)) (l (BitVec 8)) (v (BitVec 8))) (BitVec 8)
   	(bvlshr (bvshl v (bvsub #x07 h)) (bvsub #x07 (bvsub h l))));
(define-fun domain (x (BitVec 8)) Bool (or (and (bvule x #x39) (bvuge x #x30))
					(and (bvule x #x5a) (bvuge x #x41))
					(and (bvule x #x7a) (bvuge x #x61))
					(= x #x2f) (= x #x2b)
				    ));
(define-fun D ((x (BitVec 8))) (BitVec 8) (ite (= x #x2f) #x3f (
						ite (= x #x2b) #x3e (
							ite (bvule x #x39) (bvadd x #x04) (
								ite (bvule x #x5a) (bvsub x #x41) (bvsub x #x47)))))), (define-fun domain_D (x (BitVec 8)) Bool (or (and (bvule x #x39) (bvuge x #x30))
					(and (bvule x #x5a) (bvuge x #x41))
					(and (bvule x #x7a) (bvuge x #x61))
					(= x #x2f) (= x #x2b)
				    ));
===
function S0 (l: (BitVec 8)) : (BitVec 8) :=
	match l with
	| x::y::z::w::tail when (and (domain x)	(domain y) (domain z) (domain w));
		-> [(bvor (bvshl (D x ) #x02) (B #x05 #x04 (D y))) ; (bvor (bvshl (B #x03 #x00 (D y)) #x04) (B #x05 #x02 (D z)) ) ; (bvor (bvshl (B #x01 #x00 (D z)) #x06) (D w))] ++ F(tail)
	| x::y::z::w::tail when (and (domain x)	(domain y) (domain z) 
				    (= w #x3d));
		-> [(bvor (bvshl (D x ) #x02) (B #x05 #x04 (D y))) ; (bvor (bvshl (B #x03 #x00 (D y)) #x04) (B #x05 #x02 (D z)) ) ] ++ F(tail)
	| x::y::z::w::tail when (and (domain x)	(domain y)
				    (= z #x3d)
				    (= w #x3d));
		-> [(bvor (bvshl (D x ) #x02) (B #x05 #x04 (D y)))] ++ F(tail)
===
isInjective S0;
invert S0;
