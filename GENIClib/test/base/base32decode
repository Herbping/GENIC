(define-fun B ((h (BitVec 8)) (l (BitVec 8)) (v (BitVec 8))) (BitVec 8)
   	(bvlshr (bvshl v (bvsub #x07 h)) (bvsub #x07 (bvsub h l))));
(define-fun domain (x (BitVec 8)) Bool (or (and (bvule x #x37) (bvuge x #x32))
					(and (bvule x #x5a) (bvuge x #x41))
				    ));
(define-fun D ((x (BitVec 8))) (BitVec 8) (ite (bvule x #x5a) (bvsub x #x41) (bvsub x #x18)))

===
function S0 (l: (BitVec 8)) : (BitVec 8) :=
	match l with
	| x1::x2::x3::x4::x5::x6::x7::x8::tail when (and (domain x1) (domain x2) (domain x3) (domain w));
		-> [(bvor (bvshl (D x ) #x02) (B #x05 #x04 (D y))) ; (bvor (bvshl (B #x03 #x00 (D y)) #x04) (B #x05 #x02 (D z)) ) ; (bvor (bvshl (B #x01 #x00 (D z)) #x06) (D w))] ++ S0(tail)
	| x::y::z::w::tail when (and (domain x)	(domain y) (domain z) 
				    (= w #x3d));
		-> [(bvor (bvshl (D x ) #x02) (B #x05 #x04 (D y))) ; (bvor (bvshl (B #x03 #x00 (D y)) #x04) (B #x05 #x02 (D z)) ) ] 
	| x::y::z::w::tail when (and (domain x)	(domain y)
				    (= z #x3d)
				    (= w #x3d));
		-> [(bvor (bvshl (D x ) #x02) (B #x05 #x04 (D y)))]
	| [] when true;
		-> []
===
invert S0;
