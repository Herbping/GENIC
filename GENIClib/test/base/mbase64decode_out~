(define-fun D ((x (BitVec 8))) (BitVec 8) (ite (= x #x2f) #x3f (
						ite (= x #x2b) #x3e (
							ite (bvule x #x39) (bvadd x #x04) (
								ite (bvule x #x5a) (bvsub x #x41) (bvsub x #x47)))))), (define-fun domain_D (x (BitVec 8)) Bool (or (and (bvule x #x39) (bvuge x #x30))
					(and (bvule x #x5a) (bvuge x #x41))
					(and (bvule x #x7a) (bvuge x #x61))
					(= x #x2f) (= x #x2b)
				    ));
(define-fun inverted_D ((x (BitVec 8))) (BitVec 8) (ite (bvule x #x19) (bvadd x #x41) (
						ite (bvule x #x33) (bvadd x #x47) (
							ite (bvule x #x3d) (bvsub x #x04) (
								ite (= x #x3e) #x2b #x2f))))) ;
(define-fun B ((h (BitVec 8)) (l (BitVec 8)) (v (BitVec 8))) (BitVec 8)
   	(bvlshr (bvshl v (bvsub #x07 h)) (bvsub #x07 (bvsub h l))));
===
function S0 (l: (BitVec 8)) : (BitVec 8) :=
	match l with
	| y1::y2::y3::tail when (and 	(and (bvule y1 #xff) (bvuge y1 #x00))
					(and (bvule y1 #xff) (bvuge y2 #x00))
					(and (bvule y1 #xff) (bvuge y3 #x00))
				);
		-> [(E (B #x07 #x02 y1) ); (E (bvor (bvshl (B #x01 #x00 y1) #x04) (B #x07 #x04 y2))) ;  (E (bvor (bvshl (B #x04 #x00 y2) #x02) B(#x07 #x06 y3))); E((B #x05 #x00 y3))] ++ F(tail)
	| y1::y2::tail when (and 	(and (bvule y1 #xff) (bvuge y1 #x00))
					(and (bvule y1 #xff) (bvuge y2 #x00))
				);
		-> [(E (B #x07 #x02 y1) );  (E (bvor (bvshl (B #x01 #x00 y1) #x04) (B #x07 #x04 y2))) ; (E (bvshl (B #x04 #x00 y2) #x02)) ;#x3d] ++ F(tail)
	| y1::tail when (and 	(and (bvule y1 #xff) (bvuge y1 #x00))
				);
		-> [(E (B #x07 #x02 y1) ); (E (bvshl (B #x01 #x00 y1) #x04)); #x3d; #x3d] ++ F(tail)
===
isInjective S0;
invert S0;
