package injchecker;

import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import ast.*;
import automata.esfa.CartesianESFA;
import automata.esfa.ESFAMove;
import smtast.*;
import theory.CharPred;
import z3factory.Z3Factory;

import com.microsoft.z3.*;

public class ESFAConvertor {
	List<ProgNode> progs;
	String finalNode;
	Map<String, Integer> nameList;
	Context ctx;
	
	ESFAConvertor(CoderNode root, Context ctx){
		this.progs = root.getProgList();
		finalNode = "F";
		nameList = new HashMap();
		this.ctx = ctx;
	}
	
	Integer getId(String s){
		if(nameList.get(s) != null)
			return nameList.get(s);
		else{
			nameList.put(s, nameList.size()+1);
			return nameList.size();
		}
	}
	
	public CartesianESFA<BoolExpr, Expr> Convert() throws Exception{
		Collection<ESFAMove<BoolExpr, Expr>> transitions = new LinkedList<ESFAMove<BoolExpr, Expr>>();
		for(ProgNode node: this.progs){
			Integer from = getId(node.getName());
			List<TransitionNode> transList = node.getTransList();
			for(TransitionNode trans: transList){
				Integer to = getId(trans.getOutput().getFunc().FuncName());
				Z3Factory factory = new Z3Factory(ctx);
				BoolExpr pred = (BoolExpr) factory.StringToExpr(trans.getPred());
				BoolExpr[] preds = new BoolExprp[]();
			}
		}
		return null;
	}
}