

	import java.util.*;

	import com.microsoft.z3.*;

public 	class JavaExample{
	 @SuppressWarnings("serial")
	 class TestFailedException extends Exception{
		 public TestFailedException(){
			 super("Check FAILED");
			 }
		 };

		 public static void main(String[] args){
	        JavaExample p = new JavaExample();
	        try
	        {
	            com.microsoft.z3.Global.ToggleWarningMessages(true);
	            Log.open("test.log");
	               HashMap<String, String> cfg = new HashMap<String, String>();
	                cfg.put("model", "true");
	                Context ctx = new Context(cfg);
	                Context ctx2 = new Context(cfg);
	            System.out.print("Z3 Major Version: ");
	            System.out.println(Version.getMajor());
	            System.out.print("Z3 Full Version: ");
	            System.out.println(Version.getString());         
	            
	            
	            
	            System.out.println("ParserExample2");
	            Log.append("ParserExample2");

	            Symbol[] declNames = { ctx.mkSymbol("aa"), ctx.mkSymbol("b") };
	            FuncDecl a = ctx.mkConstDecl(declNames[0], ctx.mkIntSort());
	            FuncDecl b = ctx.mkConstDecl(declNames[1], ctx.mkIntSort());
	            FuncDecl[] decls = new FuncDecl[] { a, b };

	            ctx.parseSMTLIBString("(benchmark tst :formula (> aa b))", null, null,
	                    declNames, decls);
	            BoolExpr f = ctx.getSMTLIBFormulas()[0];
	            System.out.println("formula: " + f);
	            
	            System.out.println("EvalExample1");
	            Log.append("EvalExample1");

	            IntExpr x = ctx.mkIntConst("x");
	            IntExpr y = ctx.mkIntConst("y");
	            IntExpr two = ctx.mkInt(5);

	            Solver solver = ctx.mkSolver();
	            BoolExpr e = ctx.mkLt(x, y);
	            /* assert x < y */
	            solver.add(e);

	            /* assert x > 2 */
	            solver.add(ctx.mkGt(x, two));

	            /* find model for the constraints above */
	            Model model = null;
	            if (Status.SATISFIABLE == solver.check())
	            {
	                model = solver.getModel();
	                Expr v = model.evaluate(ctx.mkAdd(x, y), false);
	                if (v != null)
	                {
	                    System.out.println("result = " + (v));
	                } else
	                {
	                    System.out.println("Failed to evaluate: x+y");
	                }
	            } else
	            {
	                System.out.println("BUG, the constraints are satisfiable.");
	            }
	            Log.close();
	            if (Log.isOpen())
	                System.out.println("Log is still open!");
	        } catch (Z3Exception ex)
	        {
	            System.out.println("Z3 Managed Exception: " + ex.getMessage());
	            System.out.println("Stack trace: ");
	            ex.printStackTrace(System.out);
	        } catch (Exception ex)
	        {
	            System.out.println("Unknown Exception: " + ex.getMessage());
	            System.out.println("Stack trace: ");
	            ex.printStackTrace(System.out);
	        }
	    }
	}