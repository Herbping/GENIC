import static org.junit.Assert.*;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import com.microsoft.z3.*;

public class Test {

	@org.junit.Test
	public void test1() {
        HashMap<String, String> cfg = new HashMap<String, String>();
        cfg.put("model", "true");
        Context ctx = new Context(cfg);
        
        BoolExpr a = ctx.mkBoolConst("a");
        BoolExpr b = ctx.mkBoolConst("b'");
        System.out.println(b.getFuncDecl().getName().toString().endsWith("\'"));
        
        BoolExpr I = ctx.mkNot(ctx.mkOr(a, b));
        
        BoolExpr Ta = ctx.mkEq(toPrime(a, ctx), ctx.mkNot(a));
        BoolExpr Tb = ctx.mkEq(toPrime(b, ctx), ctx.mkXor(b,a));
        BoolExpr T = ctx.mkAnd(Ta, Tb);
        
        Expr P = ctx.mkNot(ctx.mkAnd(a, b));
        
        check(I,T, P, ctx);
		fail("Not yet implemented");
	}
	
	private static void check(Expr I, BoolExpr T, Expr P, Context ctx) {
		long start = System.currentTimeMillis();
		PDR mc = new PDR(I, T, P, ctx);
		for (PDR.Interpretation interp : mc.check()) {
			System.out.println(interp);
		}
		long stop = System.currentTimeMillis();
		System.out.println("Time: " + (stop - start) / 1000.0);
		mc.showFrames();
		System.out.println();
	}
	
	private BoolExpr toPrime(BoolExpr e, Context ctx){
		return ctx.mkBoolConst(e.getFuncDecl().getName().toString() + "\'");
	}
	
	
}
