import java_cup.runtime.*;


class TempString {
	static String str = new String();
}
%%

WHITESPACE = [ \n\t\r\f]
LETTER = [a-zA-Z]
DIGIT = [0-9]
BIDIGIT = [0-1]
SYMBOL = [a-zA-Z0-9._+\-*=%/?!$_~&^<>@]
HEXLETTER = [a-fA-F0-9]

%cup

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%

<YYINITIAL> 	"("	{ yybegin(DECLARESTATE);
		 	 		 TempString.str = "(";}

<YYINITIAL>	WHITESPACE	{// do nothing}

<DECLARESTATE>{
		[^;]		{ TempString.str += yytext();}
		";"			{ yybegin(YYINITIAL);
			  		  return new Symbol(sym.DECLARATION, TempString.str);}
}

<YYINITIAL>	"==="	{ yybegin(PGROGRAMSTATE);}

<PROGRAMSTATE>{	
		{WHITESPACE}	{// do nothing}
		"function"	{ return new Symbol(sym.FUNCTION);}
		"("			{ return new Symbol(sym.LPAREN);}
		")"			{ return new Symbol(sym.RPAREN);}
		"]"			{ return new Symbol(sym.RBRACKET);}
		";"			{ return new Symbol(sym.SEMICOLON);}
		"|"			{ return new Symbol(sym.VLINE);}
		"->"		{ return new Symbol(sym.MAPTO);}
		":"			{ return new Symbol(sym.COLON);}
		":="		{ return new Symbol(sym.DEFINE);}
		"::"		{ return new Symbol(sym.CONCAT);}
		"++"		{ return new Symbol(sym.APPEND);}
		"Int"		{ return new Symbol(sym.INT);}
		"Bool"		{ return new Symbol(sym.BOOL);}
		"BitVector" { return new Symbol(sym.BV);}
		"Char"		{ return new Symbol(sym.CHAR);}
		{DIGIT}+	{ return new Symbol(sym.INTVALUE, Integer.parseInt(yytext()));}
		"["			{ yybegin(OUTPUTFUNCTIONSTATE);
					  TempString.str = "";
				  	  return new Symbol(sym.LBRACKET);}

		"with"		{ yybegin(PREDICATESTATE);
				  	  TempString.str = "";
				  	  return new Symbol(sym.WITH);}

		"==="		{ yybegin{QUERYSTATE};}
		{LETTER}({LETTER}|{DIGIT})*	{ return new Symbol(sym.ID, yytext());}
}

<PREDICATESTATE>{
		[^;]	{ TempString.str += yytext();}
		";"		{ yybegin(PROGRAMSTATE);
			 	  return new Symbol(sym.PREDICATE, TempString.str);}
}

<OUTPUTFUNCTIONSTATE>{
		[^;\]]	{ TempString.str += yytext();}
		";"		{ String tempstr = new String(TempString.str);
				  TempString.str = "";
				  return new Symbol(sym.OUTPUTFUNCTION, tempstr);}
		"]"		{ yybegin(PROGRAMSTATE);
				  return new Symbol(sym.OUTPUTFUNCTION, tempstr);}
}

<QUERYSTATE>{
		"invert"	{return new Symbol(sym.INVERT);}
		";"			{return new Symbol(sym.SEMICOLON);}
}