
//----------------------------------------------------
// The following code was generated by CUP v0.10k
<<<<<<< HEAD
// Tue Mar 29 22:15:21 CDT 2016
=======
// Mon Mar 28 21:33:12 CDT 2016
>>>>>>> origin/HEAD
//----------------------------------------------------

package SMTParser;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.10k generated parser.
<<<<<<< HEAD
  * @version Tue Mar 29 22:15:21 CDT 2016
=======
  * @version Mon Mar 28 21:33:12 CDT 2016
>>>>>>> origin/HEAD
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
<<<<<<< HEAD
    "\000\022\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\004\013\000\002\010\004\000\002\010\002" +
    "\000\002\007\006\000\002\005\003\000\002\005\007\000" +
    "\002\006\011\000\002\006\011\000\002\006\003\000\002" +
    "\006\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003" });
=======
    "\000\010\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\004\012\000\002\011\004\000\002\011\002" +
    "\000\002\006\003\000\002\006\007" });
>>>>>>> origin/HEAD

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
<<<<<<< HEAD
    "\000\055\000\020\010\015\012\006\013\013\014\007\015" +
    "\012\016\004\017\010\001\002\000\006\002\ufff1\007\ufff1" +
    "\001\002\000\004\002\057\001\002\000\006\002\ufff6\007" +
    "\ufff6\001\002\000\006\002\ufff3\007\ufff3\001\002\000\006" +
    "\002\ufff0\007\ufff0\001\002\000\006\002\ufff5\007\ufff5\001" +
    "\002\000\006\002\ufff2\007\ufff2\001\002\000\006\002\ufff4" +
    "\007\ufff4\001\002\000\004\002\000\001\002\000\010\004" +
    "\021\005\020\006\017\001\002\000\004\002\uffff\001\002" +
    "\000\004\010\052\001\002\000\004\010\045\001\002\000" +
    "\004\012\022\001\002\000\004\010\023\001\002\000\006" +
    "\007\ufffc\010\ufffc\001\002\000\006\007\025\010\027\001" +
    "\002\000\006\010\033\012\032\001\002\000\006\007\ufffd" +
    "\010\ufffd\001\002\000\004\012\030\001\002\000\006\010" +
    "\033\012\032\001\002\000\004\007\040\001\002\000\022" +
    "\007\ufffa\010\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016" +
    "\ufffa\017\ufffa\001\002\000\004\011\034\001\002\000\004" +
    "\012\035\001\002\000\004\013\036\001\002\000\004\007" +
    "\037\001\002\000\022\007\ufff9\010\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\017\ufff9\001\002\000\006\007" +
    "\ufffb\010\ufffb\001\002\000\020\010\042\012\006\013\013" +
    "\014\007\015\012\016\004\017\010\001\002\000\006\005" +
    "\020\006\017\001\002\000\004\007\044\001\002\000\004" +
    "\002\ufffe\001\002\000\006\007\ufffc\010\ufffc\001\002\000" +
    "\006\007\047\010\027\001\002\000\020\010\042\012\006" +
    "\013\013\014\007\015\012\016\004\017\010\001\002\000" +
    "\004\007\051\001\002\000\006\002\ufff8\007\ufff8\001\002" +
    "\000\006\007\ufffc\010\ufffc\001\002\000\006\007\054\010" +
    "\027\001\002\000\020\010\042\012\006\013\013\014\007" +
    "\015\012\016\004\017\010\001\002\000\004\007\056\001" +
    "\002\000\006\002\ufff7\007\ufff7\001\002\000\004\002\001" +
    "\001\002" });
=======
    "\000\024\000\004\012\007\001\002\000\004\002\000\001" +
    "\002\000\004\002\026\001\002\000\004\002\uffff\001\002" +
    "\000\004\014\010\001\002\000\004\012\011\001\002\000" +
    "\004\011\ufffc\001\002\000\004\011\013\001\002\000\006" +
    "\012\017\014\015\001\002\000\004\011\ufffd\001\002\000" +
    "\002\001\002\000\002\001\002\000\004\013\020\001\002" +
    "\000\004\014\021\001\002\000\004\015\022\001\002\000" +
    "\004\011\023\001\002\000\002\001\002\000\004\011\025" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\001\001" +
    "\002" });
>>>>>>> origin/HEAD

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
<<<<<<< HEAD
    "\000\055\000\012\003\004\004\013\006\015\011\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\023" +
    "\001\001\000\004\007\025\001\001\000\004\005\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\042\011" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\045\001\001\000\004\007\025\001" +
    "\001\000\006\006\047\011\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\052\001\001\000\004\007" +
    "\025\001\001\000\006\006\054\011\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });
=======
    "\000\024\000\010\003\004\004\003\005\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\011\001\001\000" +
    "\004\010\013\001\001\000\004\006\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });
>>>>>>> origin/HEAD

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
<<<<<<< HEAD
		Symbol root = new parser(new Yylex(System.in)).parse();
		CmdNode Root = (CmdNode) root.value;
		Root.print_this();
=======
>>>>>>> origin/HEAD
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 17: // term_num_constant ::= RATCONSTANT 
            {
              NumconstNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NumconstNode(NumconstNode.RAT, s); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*term_num_constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // term_num_constant ::= BVCONSTANT 
            {
              NumconstNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NumconstNode(NumconstNode.BV, s); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*term_num_constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // term_num_constant ::= HEXCONSTANT 
            {
              NumconstNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NumconstNode(NumconstNode.HEX, s); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*term_num_constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // term_num_constant ::= BINCONSTANT 
            {
              NumconstNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NumconstNode(NumconstNode.BIN, s); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*term_num_constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // term_num_constant ::= NUMERAL 
            {
              NumconstNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NumconstNode(NumconstNode.NUM, s); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*term_num_constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // a_term ::= term_num_constant 
            {
              TermNode RESULT = null;
		int ncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NumconstNode nc = (NumconstNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new TermNode(nc); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*a_term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // a_term ::= SYMBOL 
            {
              TermNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new TermNode(s); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*a_term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // a_term ::= LEFTPAREN TK_EXISTS LEFTPAREN quant_var_list RIGHTPAREN a_term RIGHTPAREN 
            {
              TermNode RESULT = null;
		int qvlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int qvlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		QvlistNode qvl = (QvlistNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TermNode t1 = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new TermNode(qvl,t1,TermNode.EXISTS); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*a_term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // a_term ::= LEFTPAREN TK_FORALL LEFTPAREN quant_var_list RIGHTPAREN a_term RIGHTPAREN 
            {
              TermNode RESULT = null;
		int qvlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int qvlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		QvlistNode qvl = (QvlistNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TermNode t1 = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new TermNode(qvl,t1,TermNode.FORALL); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*a_term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // a_sort ::= LEFTPAREN TK_UNDERSCORE SYMBOL NUMERAL RIGHTPAREN 
=======
          case 7: // a_sort ::= LEFTPAREN TK_UNDERSCORE SYMBOL NUMERAL RIGHTPAREN 
>>>>>>> origin/HEAD
            {
              SortNode RESULT = null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new SortNode(sl, Integer.parseInt(i)); 
<<<<<<< HEAD
              CUP$parser$result = new java_cup.runtime.Symbol(3/*a_sort*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
=======
              CUP$parser$result = new java_cup.runtime.Symbol(4/*a_sort*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
>>>>>>> origin/HEAD
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 7: // a_sort ::= SYMBOL 
=======
          case 6: // a_sort ::= SYMBOL 
>>>>>>> origin/HEAD
            {
              SortNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new SortNode(s); 
<<<<<<< HEAD
              CUP$parser$result = new java_cup.runtime.Symbol(3/*a_sort*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // quant_var ::= LEFTPAREN SYMBOL a_sort RIGHTPAREN 
            {
              QuantvarNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SortNode st = (SortNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new QuantvarNode(s,st); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*quant_var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
=======
              CUP$parser$result = new java_cup.runtime.Symbol(4/*a_sort*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
>>>>>>> origin/HEAD
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // quant_var_list ::= 
            {
<<<<<<< HEAD
              QvlistNode RESULT = null;
		  RESULT = new QvlistNode(); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*quant_var_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
=======
              LinkedList RESULT = null;
		  RESULT = new LinkedList<QuantvarNode>(); }
			;

quant_var		::= LEFTPAREN SYMBOL:s a_sort:st RIGHTPAREN
			{:  RESULT = new QuantvarNode(s,st);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*quant_var_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
>>>>>>> origin/HEAD
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // quant_var_list ::= quant_var_list quant_var 
            {
<<<<<<< HEAD
              QvlistNode RESULT = null;
		int qvlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qvlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		QvlistNode qvl = (QvlistNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int qvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int qvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		QuantvarNode qv = (QuantvarNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  qvl.add(qv); 
			    RESULT = qvl;
			
              CUP$parser$result = new java_cup.runtime.Symbol(6/*quant_var_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
=======
              LinkedList RESULT = null;
		int qvlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qvlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList qvl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int qvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int qvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		QuantvarNode qv = (QuantvarNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  qvl.addLast(qv); 
			    RESULT = qvl;
			
              CUP$parser$result = new java_cup.runtime.Symbol(7/*quant_var_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
>>>>>>> origin/HEAD
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 3: // cmd_define ::= LEFTPAREN TK_DEFINE_FUN SYMBOL LEFTPAREN quant_var_list RIGHTPAREN a_sort a_term RIGHTPAREN 
=======
          case 3: // cmd_define ::= LEFTPAREN SYMBOL LEFTPAREN quant_var_list RIGHTPAREN a_sort a_term RIGHTPAREN 
>>>>>>> origin/HEAD
            {
              CmddefNode RESULT = null;
		int sblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sblright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String sbl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int qvlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int qvlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
<<<<<<< HEAD
		QvlistNode qvl = (QvlistNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
=======
		LinkedList qvl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
>>>>>>> origin/HEAD
		int astleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int astright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SortNode ast = (SortNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TermNode atm = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new CmddefNode(sbl, qvl, ast, atm); 
<<<<<<< HEAD
              CUP$parser$result = new java_cup.runtime.Symbol(2/*cmd_define*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
=======
              CUP$parser$result = new java_cup.runtime.Symbol(2/*cmd_define*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
>>>>>>> origin/HEAD
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 2: // cmd ::= a_term 
=======
          case 2: // cmd ::= cmd_term 
>>>>>>> origin/HEAD
            {
              CmdNode RESULT = null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
<<<<<<< HEAD
		TermNode ct = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
=======
		CmdtermNode ct = (CmdtermNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
>>>>>>> origin/HEAD
		  RESULT = new CmdNode(ct); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*cmd*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // cmd ::= cmd_define 
            {
              CmdNode RESULT = null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CmddefNode cd = (CmddefNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new CmdNode(cd); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*cmd*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= cmd EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CmdNode start_val = (CmdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

