package Parser;

import java_cup.runtime.*;
import java.util.*;
parser code {:
	public static void main(String args[]) throws Exception {
		Symbol root = new parser(new Yylex(System.in)).parse();
		CoderNode Root = (CoderNode) root.value;
		Root.print_this();
	}
:}


terminal FUNCTION, LPAREN, RPAREN, SEMICOLON, VLINE, MAPTO, COLON, DEFINE, CONCAT, APPEND, INT, BOOL, BV, CHAR, WITH, INVERT, MATCH, WHEN;
terminal Integer INTVALUE;
terminal String DECLARATION;
terminal String ID;
terminal String PREDICATE;
terminal String OUTPUTFUNCTION;

non terminal CoderNode 		coder;
non terminal LinkedList 	decl_list;
non terminal LinkedList 	program_list; 
non terminal ProgNode		program;
non terminal LinkedList		query_list;
non terminal String		query;
non terminal ProgheadNode	program_head;
non terminal ProgbodyNode	program_body;
non terminal InputNode		input;
non terminal TypeNode		type;
non terminal String		match_head;
non terminal LinkedList		case_list;
non terminal CaseNode		case;
non terminal LinkedList		pattern;
non terminal OutputNode		output;
non terminal LinkedList		outputfunction_list;
non terminal FuncNode	function;

start with coder;

coder			::= decl_list:dl program_list:pl query_list:ql
			{:  RESULT = new CoderNode(new DeclListNode(dl), new ProgListNode(pl), new QueryListNode(ql));
			:};

decl_list		::= decl_list:dl DECLARATION:d 
			{:  dl.addLast(new DeclNode(d));
			    RESULT = dl;
			:} 
			| 
			{:  RESULT = new LinkedList<DeclNode>();
			:};

program_list		::= program_list:pl program:p
			{:  pl.addLast(p);
			    RESULT = pl;  
			:} 
			| 
			{:  RESULT = new LinkedList<ProgNode>();
			:};

program			::= program_head:ph DEFINE program_body:pb
			{:  RESULT = new ProgNode(ph,pb);
			:};

program_head		::= FUNCTION ID:idstr input:innode COLON type:t
			{:  RESULT = new ProgheadNode(idstr,innode,t); 
			:};

input 			::= LPAREN ID:idstr COLON type:t RPAREN 
			{:  RESULT = new InputNode(idstr,t); 
			:};

type			::= INT 			{: RESULT = new TypeNode(Type.INT); :}
			  | BOOL 			{: RESULT = new TypeNode(Type.BOOL); :}
			  | CHAR 			{: RESULT = new TypeNode(Type.CHAR); :}
			  | LPAREN BV INTVALUE:n 	{: RESULT = new TypeNode(Type.BV,n); :} RPAREN;

program_body		::= match_head:mhstr case_list:cl
			{:  RESULT = new ProgbodyNode(mhstr, new CaseListNode(cl));
			:};

match_head		::= MATCH ID:idstr WITH
			{:  RESULT = idstr;
			:};

case_list		::= case_list:cl VLINE case:c 
			{:  cl.addLast(c);
			    RESULT = cl;
			:}
			| 
			{:  RESULT = new LinkedList<CaseNode>();
			:};

case			::= pattern:p WHEN PREDICATE:predstr MAPTO output:o
			{:  RESULT = new CaseNode(p,new PredNode(predstr),o);
			:};

pattern			::= pattern:p CONCAT ID:idstr 
			{:  p.addLast(idstr); 
			    RESULT = p;
			:} 
			| ID:idstr
			{:  LinkedList<String> result = new LinkedList<String>();
			    result.addLast(idstr);
			    RESULT = result;
			:};

output			::= outputfunction_list:ofl APPEND function:f
			{:  RESULT = new OutputNode(new OutputFuncListNode(ofl),f);
			:};

outputfunction_list	::= outputfunction_list:ofl OUTPUTFUNCTION:t  
			{:  ofl.addLast(new OutputFuncNode(t));
			    RESULT = ofl; 
			:}
			| 
			{:  RESULT = new LinkedList<OutputFuncNode>();
			:};

function		::= ID:idstr1 LPAREN ID:idstr2 RPAREN
			{:  RESULT = new FuncNode(idstr1, idstr2);
			:};

query_list		::= query_list:ql query:q
			{:  ql.addLast(new QueryNode(q));
			    RESULT = ql;
			:} 
			| 
			{:  RESULT = new LinkedList<QueryNode>();
			:};
query			::= INVERT ID:idstr 
			{:  RESULT = idstr;
			:} 
			SEMICOLON;
